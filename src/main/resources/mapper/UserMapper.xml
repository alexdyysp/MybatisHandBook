<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.alexdyysp.mapper.UserMapper">

    <resultMap id="userMap" type="com.alexdyysp.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="userAndRoleMap" type="com.alexdyysp.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <!-- sysRole -->
        <result property="sysRole.id" column="role_id" />
        <result property="sysRole.roleName" column="role_name" />
        <result property="sysRole.enabled" column="enabled" />
        <result property="sysRole.createBy" column="create_by" />
        <result property="sysRole.createTime" column="role_create_time" jdbcType="TIMESTAMP" />
    </resultMap>

    <resultMap id="userRoleMap" extends="userMap" type="com.alexdyysp.model.SysUser">
        <association property="sysRole" columnPrefix="role_" resultMap="com.alexdyysp.mapper.RoleMapper.roleMap"/>
    </resultMap>

    <resultMap id="userRoleMapSelect" extends="userMap" type="com.alexdyysp.model.SysUser">
        <association property="sysRole" column="{id=role_id}" fetchType="lazy"
                     select="com.alexdyysp.mapper.RoleMapper.selectRoleById"/>
    </resultMap>

    <resultMap id="userRoleListMap" extends="userMap" type="com.alexdyysp.model.SysUser">
        <collection property="roleList" columnPrefix="role_"
                    resultMap="com.alexdyysp.mapper.RoleMapper.rolePrivilegeListMap"/>
    </resultMap>

    <resultMap id="userRoleListMapSelect" type="com.alexdyysp.model.SysUser" extends="userMap">
        <collection property="roleList" fetchType="lazy"
                    select="com.alexdyysp.mapper.RoleMapper.selectRoleByUserId"
                    column="{userId=id}"/>
    </resultMap>

    <select id="selectById" resultMap="userMap">
        select * from sys_user where id = #{id}
    </select>

    <select id="selectByUserName" resultMap="userMap">
        select * from sys_user where user_name = #{userName}
    </select>

    <select id="selectAll" resultType="com.alexdyysp.model.SysUser">
        select id,
	    	user_name userName,
	        user_password userPassword,
	        user_email userEmail,
	        user_info userInfo,
	        head_img headImg,
	        create_time createTime
         from sys_user;
    </select>

    <select id="selectRolesByUserId" resultType="com.alexdyysp.model.SysRole">
        select r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by creatBy,
            r.create_time createTime
        from sys_user u
        inner join sys_user_role ur on u.id=ur.user_id
        inner join sys_role r on ur.role_id=r.id
        where u.id=#{userId}
    </select>


    <insert id="insert">
        insert into sys_user(
			user_name, user_password, user_email,
			user_info, head_img, create_time)
		values(
			#{userName}, #{userPassword}, #{userEmail},
			#{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
    </insert>

    <insert id="insertByUseGeneratedKeys" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user(
			user_name, user_password,
            <if test="userEmail != null and userEmail != ''">
                user_email,
            </if>
            user_info, head_img, create_time)
		values(
			#{userName}, #{userPassword},
            <if test="userEmail != null and userEmail != ''">
                #{userEmail},
            </if>
			#{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
    </insert>

    <insert id="insertBySelectKey">
        insert into sys_user(
			user_name, user_password, user_email,
			user_info, head_img, create_time)
		values(
			#{userName}, #{userPassword}, #{userEmail},
			#{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
		<selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <update id="updateById">
        update sys_user
        set user_name = #{userName},
            user_password = #{userPassword},
            user_email = #{userEmail},
            user_info = #{userInfo},
            head_img = #{headImg, jdbcType=BLOB},
            create_time = #{createTime, jdbcType=TIMESTAMP}
        where id = #{id}
    </update>

    <delete id="deleteById">
        delete from sys_user where id = #{id}
    </delete>

    <select id="selectRolesByUserIdAndRoleEnabled" resultType="com.alexdyysp.model.SysRole">
        select
			r.id,
			r.role_name roleName,
			r.enabled,
			r.create_by createBy,
			r.create_time createTime
		from sys_user u
		inner join sys_user_role ur on u.id=ur.user_id
		inner join sys_role r on ur.role_id = r.id
		where u.id = #{param1} and r.enabled = #{param2}
    </select>

    <select id="selectByUserNameOrUserEmail" resultType="com.alexdyysp.model.SysUser">
        select id,
            user_name userName,
	        user_password userPassword,
	        user_email userEmail,
	        user_info userInfo,
	        head_img headImg,
	        create_time createTime
	    from sys_user
	    <where>
            <!--<if test="@com.alexdyysp.utils.StringUtil@isNotEmpty(userName)">-->
            <if test="userName != null and userName != ''">
                and user_name like concat('%', #{userName}, '%')
            </if>
            <if test="userEmail != null and userEmail != ''">
                and user_email = #{userEmail}
            </if>
        </where>
    </select>

    <update id="updateByIdSelective">
        update sys_user
        <set>
            <if test="userName != null and username != ''">
                user_name = #{username},
            </if>
            <if test="userPassword != null and userPassword != ''">
                user_password = #{userPassword},
            </if>
            <if test="userEmail != null and userEmail != ''">
                user_email = #{userEmail},
            </if>
            <if test="userInfo != null and userInfo != ''">
                user_info = #{userInfo},
            </if>
            <if test="headImg != null">
                head_img = #{headImg, jdbcType=BLOB},
            </if>
            <if test="createTime != null">
                create_time = #{createTime, jdbcType=TIMESTAMP},
            </if>
            id = #{id},
        </set>
        where id = #{id}
    </update>

    <select id="selectByIdOrUserName" resultType="com.alexdyysp.model.SysUser">
        select id,
	    	user_name userName,
	        user_password userPassword,
	        user_email userEmail,
	        user_info userInfo,
	        head_img headImg,
	        create_time createTime
	    from sys_user
	    where 1 = 1
	    <choose>
            <when test="id != null">
                and id = #{id}
            </when>
            <when test="userName !=null and userName != ''">
                and user_name = #{userName}
            </when>
            <otherwise>
                and 1 = 2
            </otherwise>
        </choose>
    </select>

    <select id="selectByIdList" resultType="com.alexdyysp.model.SysUser">
        select id,
            user_name userName,
	        user_password userPassword,
	        user_email userEmail,
	        user_info userInfo,
	        head_img headImg,
	        create_time createTime
	    from sys_user
    	where id in
        <foreach collection="list" open="(" close=")" separator="," item="id" index="1">
            #{id}
        </foreach>
    </select>

    <insert id="insertListByForEach" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user(
            user_name, user_password,user_email,
            user_info, head_img, create_time)
        values
        <foreach collection="list" item="user" separator=",">
            (
                #{user.userName}, #{user.userPassword}, #{user.userEmail},
                #{user.userInfo}, #{user.headImg, jdbcType=BLOB}, #{user.createTime, jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>

    <update id="updateByMapForEach">
        update sys_user
        set
        <foreach collection="_parameter" item="val" index="key" separator=",">
            ${key} = #{val}
        </foreach>
        where id = #{id}
    </update>

    <select id="selectUserAndRoleById" resultType="com.alexdyysp.model.SysUser">
        select
		   	u.id,
		   	u.user_name userName,
		    u.user_password userPassword,
		    u.user_email userEmail,
		    u.user_info userInfo,
		    u.head_img headImg,
		    u.create_time createTime,
			r.id "sysRole.id",
			r.role_name "sysRole.roleName",
			r.enabled "sysRole.enabled",
			r.create_by "sysRole.createBy",
			r.create_time "sysRole.createTime"
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{id}
    </select>

    <select id="selectUserAndRoleById2" resultMap="userAndRoleMap">
        select
		   	u.id,
		   	u.user_name,
		    u.user_password,
		    u.user_email,
		    u.user_info,
		    u.head_img,
		    u.create_time,
			r.id role_id,
			r.role_name role_name,
			r.enabled enabled,
			r.create_by create_by,
			r.create_time create_time
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{id}
    </select>

    <select id="selectUserAndRoleById3" resultMap="userRoleMap">
        select
		   	u.id,
		   	u.user_name,
		    u.user_password,
		    u.user_email,
		    u.user_info,
		    u.head_img,
		    u.create_time,
			r.id role_id,
			r.role_name role_role_name,
			r.enabled role_enabled,
			r.create_by role_create_by,
			r.create_time role_create_time
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{id}
    </select>

    <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
	    select
	    	u.id,
	    	u.user_name,
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time,
			ur.role_id
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
	    where u.id = #{id}
	</select>

    <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
	    select
	    	u.id,
	    	u.user_name,
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time,
			r.id role_role_id,
			r.role_name role_role_name,
			r.enabled role_enabled,
			r.create_by role_create_by,
			r.create_time role_create_time,
			p.id role_privilege_id,
			p.id role_privilege_id,
			p.privilege_name role_privilege_privilege_name,
			p.privilege_url role_privilege_privilege_url
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
		inner join sys_role_privilege rp on rp.role_id = r.id
		inner join sys_privilege p on p.id = rp.privilege_id
	</select>

    <select id="selectAllUserAndRolesSelect" resultMap="userRoleListMapSelect">
	    select
	    	u.id,
	    	u.user_name,
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time
		from sys_user u
		where u.id = #{id}
	</select>

</mapper>